<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.spc.dao.ClassDao">
    <!--<cache/>-->
    <sql id="BASE_TABLE">
        Course
    </sql>

    <sql id="Table">
        classDateDescription,teaName,classPlace,endWeek,startWeek,classNum,className
    </sql>

    <sql id="BASE_COLUMN">
        classId,className,classNum,teaId,teaName,classChooseNum,classUpperLimit,classDateDescription,
        classPlace,classLength,classModuleNum,teacherInfo,courseInfo,departId,classSemester,classGradePoint,endWeek,startWeek,classTime,mainLecturer,classEncode,shenQingRenId,schoolDistrictId,classAllId
    </sql>

    <select id="findStudentClassTime" resultType="map">
        select s.classDateDescription,s.startWeek,s.endWeek
        from course.Course s
        join
          (
            select classId
            from course.Course_choose
            where stuId = #{stuId}
          )b
        on s.classId = b.classId
        where s.classSemester = #{classSemester};
    </select>

    <select id="findClassTimeById" resultType="map">
        select classDateDescription,startWeek,endWeek
        from course.Course
        where classId = #{classId}
    </select>
    <select id="kaiKe" resultType="map">
        select
        <include refid="BASE_COLUMN"/>
        from course.Course
        where departId = #{departId} and classSemester = #{classSemester};
    </select>


    <insert id="insert" parameterType="com.spc.model.ClassDomain">
        insert into
        <include refid="BASE_TABLE"/>
        <trim prefix=" (" suffix=" )">
            <include refid="BASE_COLUMN"/>
        </trim>
        values
        <trim prefix="( " suffix=" )">
            #{classId},#{className},#{classNum},#{teaId},#{teaName},#{classChooseNum},#{classUpperLimit},#{classDateDescription},
            #{classPlace},#{classLength},#{classModuleNum},#{teacherInfo},#{courseInfo},#{departId},#{classSemester}
            ,#{classGradePoint},#{endWeek},#{startWeek},#{classTime},#{mainLecturer},#{classEncode},#{shenQingRenId},#{schoolDistrictId},#{classAllId}
        </trim>
    </insert>


    <select id="selectClasses" resultType="com.spc.model.ClassDomain" useCache="false">
        select
        classId,className,classNum,teaId,teaName,classChooseNum,classUpperLimit,classDateDescription,
        classPlace,classLength,classModuleNum,m.modelsName as modelsName,teacherInfo,courseInfo,
        a.departId,classSemester,classGradePoint,endWeek,startWeek,schoolDistrictId,
        classEncode,classTime,mainLecturer,b.departName as departName
<!--        course.User.department as dpt -->
        from
        <include refid="BASE_TABLE"/>
        a
        left join Department b
        on a.departId = b.departId
        left join models m
        on a.classModuleNum = m.modelsId
        <where>
            <if test="departId!=88888888 ">
                and b.departId = #{departId}
            </if>
            <!--<choose>-->
                <!--<when test="departId!=88888888 and dpt==0">-->
                    <!--and b.departId = #{departId}-->
                <!--</when>-->
                <!--<otherwise>-->
                    <!---->
                <!--</otherwise>-->
            <!--</choose>-->
            <if test="modelsId!=88888888 ">
                and a.classModuleNum = #{modelsId}
            </if>
            <if test="className!=null and className!='' ">
                <bind name="classNameLike" value="'%'+className+'%'"/>
                and a.className like #{classNameLike}
            </if>
            <if test="teaName!=null and teaName!='' ">
                and a.teaName like "%"#{teaName}"%"
            </if>
            <if test="teaId!=null and teaId!=''">
                and a.teaId = #{teaId}
            </if>
            <if test="startWeek!=88888888">
                and a.startWeek >= #{startWeek}
            </if>
            <if test="endWeek!=88888888">
                and #{endWeek} >= a.endWeek
            </if>
            <if test="hasWaiGuoYu != 1">
                and a.departId != 12
            </if>
            and a.classSemester like '2018-2019æ˜¥%'
        </where>
        <if test="classNum==1">
            order by classNum asc
        </if>
        <if test="classChooseNum==1">
            order by classChooseNum asc
        </if>
    </select>

    <select id="findClassById" resultType="com.spc.model.ClassDomain">
        select *
        from course.Course
        where classId = #{classId}
        order by className, classNum asc
    </select>

    <select id="findCourseByIdForUpdate" resultType="com.spc.model.ClassDomain">
        select *
        from course.Course
        where classId = #{classId} for update
    </select>



    <select id="findAllClasseSimpleMess" resultType="map">
        select
        classDateDescription,teaName,classPlace,endWeek,startWeek,classNum,className,mainLecturer
        from Course c
        left join XjtuUserInfo x
        on x.userno = c.shenQingRenId
        <where>
            <if test="shenQingRenId != ''">
                and c.shenQingRenId =#{shenQingRenId}
            </if>
            <if test="shenQingRenName != ''">
                and x.username =#{shenQingRenName}
            </if>
            <if test="teaName !=''">
                and c.teaName=#{teaName}
            </if>
            <if test="departId != 88888888">
                and c.departId = #{departId}
            </if>
        </where>
        order by c.className,c.classNum asc
    </select>


    <select id="findCourseTable" resultType="hashmap">
        select
        <include refid="Table"/>
        from Course
        <where>
            teaId = #{teaId}
          and  classSemester = #{semester}
        </where>
    </select>

    <!--<update id="updateScore1" flushCache="true">-->
        <!--UPDATE Course_choose c-->
        <!--INNER JOIN Course a-->
        <!--ON c.classId = a.classId-->
        <!--SET c.wlzzxxGrade = #{wlzzxxGrade},c.knskGrade = #{knskGrade}-->
        <!--WHERE a.className = #{className} and a.classNum = #{classNum}-->
        <!--and c.stuId = #{stuId}-->
    <!--</update>-->
    <!--<update id="updateScore2" flushCache="true">-->
        <!--UPDATE Course_choose c-->
        <!--INNER JOIN Course a-->
        <!--ON c.classId = a.classId-->
        <!--SET c.xbsjGrade = #{xbsjGrade}-->
        <!--WHERE a.className = #{className} and a.classNum = #{classNum}-->
        <!--and c.stuId = #{stuId}-->
    <!--</update>-->
    <update id="updateScore3" flushCache="true">
        UPDATE Course_choose c
        INNER JOIN Course a
        ON c.classId = a.classId
        SET
        <trim  suffixOverrides="," >
            <if test="xbsjGrade!=88888888">
                c.xbsjGrade = #{xbsjGrade},
            </if>
            <if test="wlzzxxGrade!=88888888">
                c.wlzzxxGrade = #{wlzzxxGrade},
            </if>
            <if test="knskGrade!=88888888">
                c.knskGrade = #{knskGrade},
            </if>
        </trim>
        WHERE a.className = #{className} and a.classNum = #{classNum}
        and c.stuId = #{stuId}
    </update>

    <update id="zzGrade" flushCache="true">
        UPDATE Course_choose c
        INNER JOIN Course a
        ON c.classId = a.classId
        SET c.zzGrade = #{zzGrade}, c.flag = #{flag}
        WHERE a.className = #{className} and a.classNum = #{classNum}
        and c.stuId = #{stuId}
    </update>

    <update id="updateChooseNum" flushCache="true">
        update course.Course a
        set classChooseNum  = classChooseNum+#{num}
        where classId = #{classId}
    </update>

    <delete id="delete" flushCache="true">
        delete
        from course.Course
        where classId =#{classId}
    </delete>
    <delete id="deleteByClassAllId">
        delete
        from course.Course
        where classAllId =#{classAllId}
    </delete>

    <select id="getClassId" resultType="map">
        select classId,classChooseNum
        from course.Course
        where classAllId = #{classAllId}
    </select>


    <select id="getClassInfo" resultType="map">
        select *
        from course.Course
        where classAllId = #{classAllId}
    </select>
    <select id="haveStuInClass" resultType="map">
        select stuId,classId
        from course.Course_choose
        where stuId=#{stuId} and classId=#{classId}
    </select>


    <select id="findClasses" resultType="map" useCache="false">
        select
        classId,className,classNum,teaId,teaName,classSemester,classGradePoint,endWeek,startWeek,
        classEncode,classTime,classDateDescription
        from
        <include refid="BASE_TABLE"/>
        a
        left join Department b
        on a.departId = b.departId
        left join models m
        on a.classModuleNum = m.modelsId
        <where>
            <if test="departId!=88888888 ">
                and b.departId = #{departId}
            </if>
            <if test="modelsId!=88888888 ">
                and a.classModuleNum = #{modelsId}
            </if>
            <if test="className!=null and className!='' ">
                and a.className like "%"#{className}"%"
            </if>
            <if test="teaName!=null and teaName!='' ">
                and a.teaName like "%"#{teaName}"%"
            </if>
            <if test="teaId!=null and teaId!=''">
                and a.teaId = #{teaId}
            </if>
            <if test="startWeek!=88888888">
                and a.startWeek >= #{startWeek}
            </if>
            <if test="endWeek!=88888888">
                and #{endWeek} >= a.endWeek
            </if>
            <if test="hasWaiGuoYu != 1">
                and a.departId != 12
            </if>
        </where>
        <if test="classNum==1">
            order by classNum asc
        </if>
        <if test="classChooseNum==1">
            order by classChooseNum asc
        </if>
    </select>
    <select id="currentCalendar" resultType="Map">
        select *
        from course.schoolCalendar
        where flag=1
        limit 1
    </select>
    <select id="findWeekCourses" resultType="Map">
        select classId,classNum,className,classChooseNum,classDateDescription,classModuleNum,departId,startWeek,endWeek,classSemester
        from course.Course
        where teaId=#{teaId}
        and classSemester=#{semester}
        and startWeek &lt;= #{weekth}
        and #{weekth}-endWEEK &lt;=1

    </select>

    <select id="weekCourseStatus" resultType="int">
        select COUNT(*)
        from course.teaWeekComment
        where classId=#{classId}

    </select>
    <select id="findCommentNumber" resultType="int">
        select COUNT(distinct stuId)
        from course.TeaComment
        where classId=#{classId}

    </select>

    <select id="findWeekComment" resultType="map">
        SELECT *
        FROM course.teaWeekComment
        WHERE stuId=#{stuId}
        and weekth=#{weekth}
        and classId=#{classId}
        order by dateTime desc
    </select>

    <select id="findTeachCourse" resultType="Map">
        select *
        from course.Course
        where  teaId=#{teacherId}
        and classSemester=#{academicYear}

    </select>



    <select id="findClassInfo" resultType="Map">
        select *
        from course.Course
        where classId = #{classStr}
    </select>

    <update id="updateGradeFlag">
        update Course set isGrade=1
        where classId=#{classId}
    </update>

    <update id="updateKnskGradeFlag">
        update course.v_t_xk_by_yjsrw set isGrade=1
        where JXBID=#{JXBID}
    </update>

    <select id="findClassId" resultType="Map">
        select c.classId,c.isGrade
        from course.Course c
        join course.ClassAll  b
        on  b.id=c.classAllId
        where b.courseId=#{courseId}
        and c.classNum=#{classNum}
    </select>

    <select id="findAllDepartment" resultType="Map">
        select *
        from course.Department
    </select>

    <select id="findIsGrade" resultType="int">
        select c.isGrade
        from course.Course c
        where c.classId=#{classId}
    </select>

    <update id="updateIsGrade">
        update Course set isGrade=1
        where classId=#{classId}
    </update>

    <update id="updateXbsjScore">
        update course.Course_choose set course.Course_choose.xbsjGrade=#{xbsjGrade}
        where classId=#{classId} and stuId=#{stuId}
    </update>

    <select id="findTeachCourse2" resultType="Map">
        select *
        from course.v_t_xk_by_yjsrw
        where  (SKJS=#{teacherId})
        and (KCH='121066' OR KCH='121067' OR KCH='122036')
        and XNXQDM like "%"#{academicYear}"%"
    </select>

    <select id="findClassIds" resultType="Map">
        select c.classId
        from course.Course c
    </select>


    <select id="findKnskStudents" resultType="map" useCache="false">
        select DISTINCT
        a.XH as stuId,a.knskGrade,a.isChecked,b.username as stuName,b.speciality,b.dep as departName
        from course.KnskGrade a
        left join course.XjtuUserInfo b
        on a.XH = b.userno
        <where>
            <if test="JXBID!='88888888'">
                a.JXBID = #{JXBID}
            </if>
        </where>
    </select>

    <select id="findKnskIsGrade" resultType="int">
        select c.isGrade
        from course.v_t_xk_by_yjsrw c
        where c.JXBID=#{JXBID}
    </select>

    <select id="findStudentsList" resultType="Map">
        select DISTINCT
        c.JXBID,c.XH,c.KCH
        from course.v_t_xk_by_yjsyxkb c
        where c.KCH='121066' OR c.KCH='121067' or c.KCH='122036'
    </select>

    <select id="findKnskClassById" resultType="Map">
        select a.*,b.username as teaName
        from course.v_t_xk_by_yjsrw  a
        left join course.XjtuUserInfo b
        on a.SKJS=b.userno
        where JXBID = #{JXBID}
    </select>

    <select id="findAlldepartment" resultType="Map">
        select a.departCode as depId,a.departName
        from course.Department a
    </select>


    <select id="findAllXbsjCourse" resultType="Map">
        select a.classId,b.className as classNum,a.teaName,a.className,a.isGrade as isSubmit,c.departName,b.courseId,a.classSemester as semesterName,a.classChooseNum as chooseNum,c.departName
        from course.Course a
        left join course.ClassAll b
        on a.classAllId=b.id
        left join course.Department c
        on b.departId=c.departId
        <where>
            <if test="academicYear!=null">
                and a.classSemester=#{academicYear}
            </if>
            <if test="departId!=null">
                and b.departId= #{departId}
            </if>
            <if test="teaName!= '88888888' and teaName!=null ">
                and a.teaName= #{teaName}
            </if>
            <if test="courseId!= '88888888' and courseId!=null ">
                and b.courseId like "%"#{courseId}"%"
            </if>
            <if test="className!= '88888888' and className!=null ">
                and a.className like "%"#{className}"%"
            </if>
            <if test="classNum!= '88888888' and classNum!=null ">
                and b.className like "%"#{classNum}"%"
            </if>
        </where>
    </select>

    <select id="findAllKnskCourse" resultType="Map">
        select a.JXBID as classId,a.XKZRS as chooseNum,a.JXBMC as classNum,b.username as teaName,a.KCH as courseId,a.isGrade as isSubmit,a.XNXQDM as semesterName
        from course.v_t_xk_by_yjsrw a
        left join course.XjtuUserInfo b
        on a.SKJS=b.userno
        <where>

            <if test="academicYear!=null">
                and a.XNXQDM=#{academicYear} and (a.KCH='121066' OR a.KCH='121067' OR a.KCH='122036')
            </if>
            <if test="teaName!= '88888888' and teaName!=null ">
                and b.username= #{teaName}
            </if>
            <if test="courseId!= '88888888' and courseId!=null ">
                and a.JXBID like "%"#{courseId}"%"
            </if>
            <if test="classNum!= '88888888' and classNum!=null ">
                and a.JXBMC like "%"#{classNum}"%"
            </if>
            <if test="className == 'å­¦æœ¯è‹±è¯­(ä¸€)'">
                and a.KCH='121066'
            </if>
            <if test="className == 'å­¦æœ¯è‹±è¯­(äºŒ)' ">
                and a.KCH='121067'
            </if>
            <if test="className == 'å­¦æœ¯è‹±è¯­å†™ä½œ'">
                and a.KCH='122036'
            </if>
        </where>
    </select>

    <update id="updateXbsjChecked">
      update course.Course_choose set course.Course_choose.isChecked=0
      where course.Course_choose.classId=#{classId} and course.Course_choose.stuId=#{stuId}
     </update>

    <update id="updateKnskChecked">
      update course.KnskGrade set course.KnskGrade.isChecked=0
      where course.KnskGrade.JXBID=#{classId} and course.KnskGrade.XH=#{stuId}
     </update>


    <select id="findStuXbsjClass" resultType="Map">
        select a.stuId,a.xbsjGrade,b.classTime,b.classId
        from course.Course_choose a
        left join course.Course b
        on a.classId=b.classId
        where a.stuId=#{stuId}
    </select>

    <select id="findCourseById" resultType="Map">
        select b.courseId,c.departName
        from course.Course a
        left join course.ClassAll b
        on a.classAllId=b.id
        left join course.Department c
        on a.departId=c.departId
        where a.classId=#{classId}
    </select>


    <select id="findStudentIsChecked" resultType="int">
        select c.isChecked
        from course.Course_choose c
        where c.classId=#{classId} and c.stuId=#{stuId}
    </select>

    <select id="findStudentKnskIsChecked" resultType="int">
        select c.isChecked
        from course.KnskGrade c
        where c.JXBID=#{JXBID} and c.stuId=#{stuId}
    </select>

</mapper>
